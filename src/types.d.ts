/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/genome/{genome_id}": {
    /**
     * Get a genome by ID
     * @description Returns detailed information about a specific genome
     */
    get: {
      parameters: {
        path: {
          /** @example 83332.12 */
          genome_id: string;
        };
      };
      responses: {
        /** @description Genome details */
        200: {
          content: {
            "application/json": components["schemas"]["Genome"];
          };
        };
        /** @description Genome not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/genome/": {
    /**
     * Query genomes using RQL
     * @description Query genomes using Resource Query Language (RQL)
     */
    get: {
      parameters: {
        query: {
          /**
           * @description RQL query string
           * @example eq(genome_id,83332.12)
           */
          rql: string;
        };
      };
      responses: {
        /** @description Query results */
        200: {
          content: {
            "application/json": components["schemas"]["Genome"][];
          };
        };
        /** @description Invalid query */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Query genomes
     * @description Query genomes using RQL or Solr syntax
     */
    post: {
      requestBody?: {
        content: {
          /** @example eq(genome_id,83332.12) */
          "application/rqlquery+x-www-form-urlencoded": string;
          /** @example q=genome_id:83332.12 */
          "application/solrquery+x-www-form-urlencoded": string;
        };
      };
      responses: {
        /** @description Query results */
        200: {
          content: {
            "application/json": components["schemas"]["Genome"][];
            "application/solr+json": {
              responseHeader?: Record<string, never>;
              response?: Record<string, never>;
              facet_counts?: Record<string, never>;
            };
            "text/csv": string;
            "text/tsv": string;
            "application/vnd.openxmlformats": string;
          };
        };
        /** @description Invalid query */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/genome_feature/{feature_id}": {
    /**
     * Get a genome feature by ID
     * @description Returns detailed information about a specific genomic feature
     */
    get: {
      parameters: {
        path: {
          /** @example RefSeq.1001732.3.AKUQ01000008.CDS.655540.656001.rev */
          feature_id: string;
        };
      };
      responses: {
        /** @description Feature details */
        200: {
          content: {
            "application/json": components["schemas"]["GenomeFeature"];
          };
        };
        /** @description Feature not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/genome_feature/": {
    /**
     * Query genome features
     * @description Query genome features using RQL
     */
    get: {
      parameters: {
        query: {
          /**
           * @description RQL query string
           * @example eq(genome_id,83332.12)
           */
          rql: string;
        };
      };
      responses: {
        /** @description Query results */
        200: {
          content: {
            "application/json": components["schemas"]["GenomeFeature"][];
            "application/dna+fasta": string;
            "application/protein+fasta": string;
          };
        };
      };
    };
  };
  "/authenticate": {
    /**
     * Authenticate user
     * @description Authenticates a user and returns a token to be used for subsequent API calls
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description User's username or email */
            username: string;
            /**
             * Format: password
             * @description User's password
             */
            password: string;
          };
        };
      };
      responses: {
        /** @description Authentication successful */
        200: {
          content: {
            "text/plain": string;
          };
        };
        /** @description Authentication failed */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /**
       * Format: int32
       * @description HTTP status code
       */
      status?: number;
      /** @description Error message */
      message?: string;
    };
    Genome: {
      /** @description Unique identifier for the genome */
      genome_id?: string;
      /** @description Scientific name of the genome */
      genome_name?: string;
      /** @description Taxonomy identifier */
      taxon_id?: number;
      /** @description Status of the genome (e.g., complete, WGS, etc.) */
      genome_status?: string;
      /** @description Assembly accession number */
      assembly_accession?: string;
      /** @description Number of contigs in the genome */
      contigs?: number;
      /** @description Number of plasmids in the genome */
      plasmids?: number;
      /**
       * Format: date
       * @description Date when the genome was completed
       */
      completion_date?: string;
      /** @description Publication PubMed IDs, comma-separated */
      publication?: string;
    };
    GenomeFeature: {
      /** @description Unique identifier for the feature */
      feature_id?: string;
      /** @description Genome identifier this feature belongs to */
      genome_id?: string;
      /** @description Annotation source (e.g., PATRIC, RefSeq) */
      annotation?: string;
      /** @description Type of feature (e.g., CDS, rRNA, tRNA) */
      feature_type?: string;
      /** @description Start position in the sequence */
      start?: number;
      /** @description End position in the sequence */
      end?: number;
      /**
       * @description Strand orientation
       * @enum {string}
       */
      strand?: "+" | "-";
      /** @description Gene symbol */
      gene?: string;
      /** @description Product name or description */
      product?: string;
      /** @description Amino acid sequence */
      aa_sequence?: string;
      /** @description Nucleotide sequence */
      na_sequence?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
